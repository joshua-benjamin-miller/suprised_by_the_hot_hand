function f = Ecprop(n,p,k)

%Version 1.0
%Date: 26-May-2015


%Description: This code calculates the expected proportion from
%appendix E.2 Equation 20 for a given n, k, p, 
%using the data files produced by running:
%1. ProccessDataProp.m, which depends on the data produced by running
%2. ForServer.m, which calls 
%3. WriteProp.m (twice), which itself calls
%4. Eprop.m


%addpath('C:\Users\Miller\Dropbox\josh\work\projects\Adam\HotHand\Data\statTheory')
%rehash path
%eDP=@(n) -1./(n-1);

%clear

%   which depends on the file load PropData.mat
%       which is generated by WriteProp.m
%           *Note* we use WriteProp.m twice to create a finer grid, so we
%           need to merge. see ProcessDataProp
%

%Define a version formula provided in Appendix A Theorem 2
ePstat = @(n,p) ( n./( (n-1).*(1-(1-p).^n-p.*(1-p).^(n-1)) ) ).*( p-(1-(1-p).^n)./n );


if k>5
    error('k must be less than or equal to 5');
    return,
end

if k==1
    f=ePstat(n,p);
else
   % load PropData.mat
   load PropFine.mat
    %p=.80;
    %k=3;
    %n=10;
    lookup=DATA{kindex(k),nindex(n)};
    n1 =lookup(:,3);
    stat=lookup(:,4);
    n=n*ones(size(n1));
    nCounted=lookup(:,5);
    nUncounted=lookup(:,6);
    
    %Average over the counted sequences, and subt
    f=sum(nCounted.*(p.^n1.*(1-p).^(n-n1)).*stat)/(1-sum(nUncounted.*(p.^n1.*(1-p).^(n-n1))));
    
    % %Equivalent to the same divided by their total probability.
    % total=sum(nCounted.*(p.^n1.*(1-p).^(n-n1)).*stat)/(sum(nCounted.*(p.^n1.*(1-p).^(n-n1))))
end

end
